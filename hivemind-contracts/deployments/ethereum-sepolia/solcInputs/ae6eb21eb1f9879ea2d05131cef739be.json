{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/base/OApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract OApp is Ownable {\n    address public immutable endpoint;\n    \n    struct Origin {\n        uint32 srcEid;\n        bytes32 sender;\n        uint64 nonce;\n    }\n    \n    struct MessagingFee {\n        uint256 nativeFee;\n        uint256 lzTokenFee;\n    }\n    \n    constructor(address _endpoint, address _delegate) Ownable(_delegate) {\n        endpoint = _endpoint;\n    }\n    \n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address payable _refundAddress,\n        bytes memory _composeMsg\n    ) internal returns (bytes32) {\n        // Simplified send\n        return keccak256(abi.encodePacked(_dstEid, _message, block.timestamp));\n    }\n    \n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view returns (MessagingFee memory) {\n        return MessagingFee({\n            nativeFee: 0.001 ether,\n            lzTokenFee: 0\n        });\n    }\n    \n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n}"
    },
    "contracts/base/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract OFTCore is Ownable {\n    uint8 public immutable sharedDecimals;\n    address public immutable lzEndpoint;\n    \n    struct SendParam {\n        uint32 dstEid;\n        bytes32 to;\n        uint256 amountLD;\n        uint256 minAmountLD;\n        bytes extraOptions;\n        bytes composeMsg;\n        bytes oftCmd;\n    }\n    \n    struct MessagingFee {\n        uint256 nativeFee;\n        uint256 lzTokenFee;\n    }\n    \n    constructor(\n        uint8 _sharedDecimals,\n        address _lzEndpoint,\n        address _delegate\n    ) Ownable(_delegate) {\n        sharedDecimals = _sharedDecimals;\n        lzEndpoint = _lzEndpoint;\n    }\n    \n    function _debit(\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\n    \n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 _srcEid\n    ) internal virtual returns (uint256 amountReceivedLD);\n    \n    function _send(\n        SendParam memory _sendParam,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal returns (bytes32 guid) {\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n        \n        // Simplified send logic\n        guid = keccak256(abi.encodePacked(block.timestamp, _sendParam.dstEid, _sendParam.to));\n        return guid;\n    }\n    \n    function _quote(\n        SendParam memory _sendParam,\n        bool _payInLzToken\n    ) internal view returns (MessagingFee memory) {\n        // Simplified quote logic\n        return MessagingFee({\n            nativeFee: 0.001 ether,\n            lzTokenFee: 0\n        });\n    }\n}"
    },
    "contracts/HiveMindCoordinator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title HiveMindCoordinator\n * @notice Coordinates AI agent swarm operations with micropayments\n * @dev Manages agent registration, task distribution, and earnings\n */\ncontract HiveMindCoordinator is Ownable, ReentrancyGuard {\n    \n    // Agent structure\n    struct Agent {\n        address wallet;\n        string endpoint;\n        string[] capabilities;\n        uint256 reputation;\n        uint256 earnings;\n        uint256 tasksCompleted;\n        bool active;\n        uint256 registeredAt;\n    }\n    \n    // Task structure\n    struct Task {\n        uint256 id;\n        address requester;\n        string taskType;\n        string ipfsHash; // Task details stored on IPFS\n        uint256 reward;\n        address assignedAgent;\n        TaskStatus status;\n        uint256 createdAt;\n        uint256 completedAt;\n    }\n    \n    enum TaskStatus {\n        Pending,\n        Assigned,\n        InProgress,\n        Completed,\n        Failed,\n        Disputed\n    }\n    \n    // State variables\n    IERC20 public paymentToken; // USDC or other stablecoin\n    uint256 public taskCounter;\n    uint256 public platformFee = 100; // 1% = 100 basis points\n    uint256 public minReputation = 100;\n    uint256 public totalEarnings;\n    \n    // Mappings\n    mapping(address => Agent) public agents;\n    mapping(uint256 => Task) public tasks;\n    mapping(address => uint256[]) public agentTasks;\n    mapping(string => address[]) public capabilityToAgents;\n    \n    // Arrays for enumeration\n    address[] public registeredAgents;\n    \n    // Events\n    event AgentRegistered(address indexed agent, string endpoint);\n    event AgentUpdated(address indexed agent, string[] capabilities);\n    event TaskCreated(uint256 indexed taskId, address indexed requester, uint256 reward);\n    event TaskAssigned(uint256 indexed taskId, address indexed agent);\n    event TaskCompleted(uint256 indexed taskId, address indexed agent, uint256 reward);\n    event TaskFailed(uint256 indexed taskId, address indexed agent);\n    event ReputationUpdated(address indexed agent, uint256 newReputation);\n    event EarningsWithdrawn(address indexed agent, uint256 amount);\n    \n    constructor(address _paymentToken) Ownable(msg.sender) {\n        paymentToken = IERC20(_paymentToken);\n    }\n    \n    /**\n     * @notice Register a new agent in the swarm\n     * @param endpoint Agent's API endpoint\n     * @param capabilities Array of agent capabilities\n     */\n    function registerAgent(\n        string memory endpoint,\n        string[] memory capabilities\n    ) external {\n        require(bytes(endpoint).length > 0, \"Invalid endpoint\");\n        require(capabilities.length > 0, \"No capabilities provided\");\n        require(!agents[msg.sender].active, \"Agent already registered\");\n        \n        Agent storage newAgent = agents[msg.sender];\n        newAgent.wallet = msg.sender;\n        newAgent.endpoint = endpoint;\n        newAgent.capabilities = capabilities;\n        newAgent.reputation = minReputation;\n        newAgent.active = true;\n        newAgent.registeredAt = block.timestamp;\n        \n        registeredAgents.push(msg.sender);\n        \n        // Map capabilities to agent\n        for (uint i = 0; i < capabilities.length; i++) {\n            capabilityToAgents[capabilities[i]].push(msg.sender);\n        }\n        \n        emit AgentRegistered(msg.sender, endpoint);\n    }\n    \n    /**\n     * @notice Update agent capabilities\n     * @param capabilities New array of capabilities\n     */\n    function updateCapabilities(string[] memory capabilities) external {\n        require(agents[msg.sender].active, \"Agent not registered\");\n        require(capabilities.length > 0, \"No capabilities provided\");\n        \n        // Clear old capability mappings\n        string[] memory oldCapabilities = agents[msg.sender].capabilities;\n        for (uint i = 0; i < oldCapabilities.length; i++) {\n            _removeFromCapabilityMapping(oldCapabilities[i], msg.sender);\n        }\n        \n        // Update capabilities\n        agents[msg.sender].capabilities = capabilities;\n        \n        // Update capability mappings\n        for (uint i = 0; i < capabilities.length; i++) {\n            capabilityToAgents[capabilities[i]].push(msg.sender);\n        }\n        \n        emit AgentUpdated(msg.sender, capabilities);\n    }\n    \n    /**\n     * @notice Create a new task\n     * @param taskType Type of task\n     * @param ipfsHash IPFS hash containing task details\n     * @param reward Task reward amount\n     */\n    function createTask(\n        string memory taskType,\n        string memory ipfsHash,\n        uint256 reward\n    ) external nonReentrant returns (uint256) {\n        require(reward > 0, \"Invalid reward amount\");\n        require(bytes(taskType).length > 0, \"Invalid task type\");\n        require(bytes(ipfsHash).length > 0, \"Invalid IPFS hash\");\n        \n        // Transfer reward to contract\n        require(\n            paymentToken.transferFrom(msg.sender, address(this), reward),\n            \"Payment transfer failed\"\n        );\n        \n        taskCounter++;\n        \n        Task storage newTask = tasks[taskCounter];\n        newTask.id = taskCounter;\n        newTask.requester = msg.sender;\n        newTask.taskType = taskType;\n        newTask.ipfsHash = ipfsHash;\n        newTask.reward = reward;\n        newTask.status = TaskStatus.Pending;\n        newTask.createdAt = block.timestamp;\n        \n        emit TaskCreated(taskCounter, msg.sender, reward);\n        \n        return taskCounter;\n    }\n    \n    /**\n     * @notice Assign task to an agent\n     * @param taskId Task ID to assign\n     * @param agent Agent address to assign to\n     */\n    function assignTask(uint256 taskId, address agent) external {\n        Task storage task = tasks[taskId];\n        require(task.id != 0, \"Task does not exist\");\n        require(task.status == TaskStatus.Pending, \"Task not available\");\n        require(agents[agent].active, \"Agent not active\");\n        require(\n            msg.sender == task.requester || msg.sender == owner(),\n            \"Not authorized\"\n        );\n        \n        task.assignedAgent = agent;\n        task.status = TaskStatus.Assigned;\n        agentTasks[agent].push(taskId);\n        \n        emit TaskAssigned(taskId, agent);\n    }\n    \n    /**\n     * @notice Mark task as completed and distribute rewards\n     * @param taskId Task ID to complete\n     */\n    function completeTask(uint256 taskId) external nonReentrant {\n        Task storage task = tasks[taskId];\n        require(task.id != 0, \"Task does not exist\");\n        require(\n            task.status == TaskStatus.Assigned || \n            task.status == TaskStatus.InProgress,\n            \"Task not in progress\"\n        );\n        require(\n            msg.sender == task.assignedAgent || \n            msg.sender == task.requester ||\n            msg.sender == owner(),\n            \"Not authorized\"\n        );\n        \n        task.status = TaskStatus.Completed;\n        task.completedAt = block.timestamp;\n        \n        // Calculate platform fee\n        uint256 fee = (task.reward * platformFee) / 10000;\n        uint256 agentReward = task.reward - fee;\n        \n        // Update agent stats\n        Agent storage agent = agents[task.assignedAgent];\n        agent.earnings += agentReward;\n        agent.tasksCompleted++;\n        agent.reputation = _calculateReputation(agent);\n        \n        totalEarnings += fee;\n        \n        // Transfer reward to agent\n        require(\n            paymentToken.transfer(task.assignedAgent, agentReward),\n            \"Reward transfer failed\"\n        );\n        \n        emit TaskCompleted(taskId, task.assignedAgent, agentReward);\n        emit ReputationUpdated(task.assignedAgent, agent.reputation);\n    }\n    \n    /**\n     * @notice Mark task as failed\n     * @param taskId Task ID that failed\n     */\n    function failTask(uint256 taskId) external {\n        Task storage task = tasks[taskId];\n        require(task.id != 0, \"Task does not exist\");\n        require(\n            task.status == TaskStatus.Assigned || \n            task.status == TaskStatus.InProgress,\n            \"Task not in progress\"\n        );\n        require(\n            msg.sender == task.assignedAgent || \n            msg.sender == task.requester ||\n            msg.sender == owner(),\n            \"Not authorized\"\n        );\n        \n        task.status = TaskStatus.Failed;\n        \n        // Reduce agent reputation\n        Agent storage agent = agents[task.assignedAgent];\n        agent.reputation = (agent.reputation * 90) / 100; // 10% reduction\n        \n        // Refund task requester\n        require(\n            paymentToken.transfer(task.requester, task.reward),\n            \"Refund transfer failed\"\n        );\n        \n        emit TaskFailed(taskId, task.assignedAgent);\n        emit ReputationUpdated(task.assignedAgent, agent.reputation);\n    }\n    \n    /**\n     * @notice Get agents with specific capability\n     * @param capability Capability to search for\n     * @return Array of agent addresses\n     */\n    function getAgentsByCapability(string memory capability) \n        external \n        view \n        returns (address[] memory) \n    {\n        return capabilityToAgents[capability];\n    }\n    \n    /**\n     * @notice Get agent details\n     * @param agent Agent address\n     * @return Agent struct\n     */\n    function getAgent(address agent) \n        external \n        view \n        returns (Agent memory) \n    {\n        return agents[agent];\n    }\n    \n    /**\n     * @notice Get task details\n     * @param taskId Task ID\n     * @return Task struct\n     */\n    function getTask(uint256 taskId) \n        external \n        view \n        returns (Task memory) \n    {\n        return tasks[taskId];\n    }\n    \n    /**\n     * @notice Get tasks assigned to an agent\n     * @param agent Agent address\n     * @return Array of task IDs\n     */\n    function getAgentTasks(address agent) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        return agentTasks[agent];\n    }\n    \n    /**\n     * @notice Withdraw platform earnings (owner only)\n     */\n    function withdrawPlatformEarnings() external onlyOwner nonReentrant {\n        uint256 amount = totalEarnings;\n        totalEarnings = 0;\n        \n        require(\n            paymentToken.transfer(owner(), amount),\n            \"Withdrawal failed\"\n        );\n        \n        emit EarningsWithdrawn(owner(), amount);\n    }\n    \n    /**\n     * @notice Update platform fee (owner only)\n     * @param newFee New fee in basis points (100 = 1%)\n     */\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\n        require(newFee <= 1000, \"Fee too high\"); // Max 10%\n        platformFee = newFee;\n    }\n    \n    /**\n     * @notice Calculate agent reputation based on performance\n     * @param agent Agent struct\n     * @return New reputation score\n     */\n    function _calculateReputation(Agent memory agent) \n        private \n        view \n        returns (uint256) \n    {\n        if (agent.tasksCompleted == 0) {\n            return agent.reputation;\n        }\n        \n        // Simple reputation calculation\n        // Can be enhanced with more sophisticated algorithms\n        uint256 baseScore = minReputation;\n        uint256 performanceBonus = agent.tasksCompleted * 10;\n        uint256 earningsBonus = agent.earnings / 1e18; // Per token earned\n        \n        return baseScore + performanceBonus + earningsBonus;\n    }\n    \n    /**\n     * @notice Remove agent from capability mapping\n     * @param capability Capability string\n     * @param agent Agent address to remove\n     */\n    function _removeFromCapabilityMapping(\n        string memory capability, \n        address agent\n    ) private {\n        address[] storage agentList = capabilityToAgents[capability];\n        for (uint i = 0; i < agentList.length; i++) {\n            if (agentList[i] == agent) {\n                agentList[i] = agentList[agentList.length - 1];\n                agentList.pop();\n                break;\n            }\n        }\n    }\n    \n    /**\n     * @notice Get total number of registered agents\n     * @return Number of agents\n     */\n    function getAgentCount() external view returns (uint256) {\n        return registeredAgents.length;\n    }\n    \n    /**\n     * @notice Get total number of tasks\n     * @return Number of tasks\n     */\n    function getTaskCount() external view returns (uint256) {\n        return taskCounter;\n    }\n}"
    },
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ninterface ILayerZeroEndpoint {\n    struct MessagingParams {\n        uint32 dstEid;\n        bytes32 receiver;\n        bytes message;\n        bytes options;\n        bool payInLzToken;\n    }\n\n    struct MessagingReceipt {\n        bytes32 guid;\n        uint64 nonce;\n        MessagingFee fee;\n    }\n\n    struct MessagingFee {\n        uint256 nativeFee;\n        uint256 lzTokenFee;\n    }\n\n    struct Origin {\n        uint32 srcEid;\n        bytes32 sender;\n        uint64 nonce;\n    }\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory);\n\n    function quote(\n        MessagingParams calldata _params,\n        address _sender\n    ) external view returns (MessagingFee memory);\n\n    function setDelegate(address _delegate) external;\n}"
    },
    "contracts/MCPPaymentGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface IX402PaymentRouter {\n    function requestPayment(\n        address _serviceProvider,\n        uint256 _amount,\n        string memory _requestedToken,\n        uint32 _destinationChain,\n        bytes calldata _serviceData\n    ) external payable returns (bytes32 requestId);\n    \n    function registerService(\n        string memory _serviceName,\n        address _endpoint,\n        uint256 _fee\n    ) external;\n}\n\ninterface IHiveMindCoordinator {\n    function registerAgent(string memory endpoint, string[] memory capabilities) external;\n    function createTask(string memory taskType, string memory ipfsHash, uint256 reward) external returns (uint256);\n}\n\n/**\n * @title MCPPaymentGateway\n * @notice Gateway for MCP (Model Context Protocol) services to receive payments\n * @dev Integrates with x402 protocol and LayerZero for cross-chain payments\n */\ncontract MCPPaymentGateway is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    \n    // MCP Service structure\n    struct MCPService {\n        string serviceName;\n        address provider;\n        string[] acceptedTokens;\n        uint256 baseFee;\n        uint32[] supportedChains;\n        bool isActive;\n        uint256 totalEarned;\n        uint256 requestsServed;\n    }\n    \n    // Payment request from MCP\n    struct MCPPaymentRequest {\n        bytes32 requestId;\n        address mcp;\n        address payer;\n        string requestedToken;\n        uint256 amount;\n        uint32 targetChain;\n        bytes serviceData;\n        uint256 timestamp;\n        RequestStatus status;\n    }\n    \n    enum RequestStatus {\n        Pending,\n        Processing,\n        Paid,\n        Failed,\n        Refunded\n    }\n    \n    // State variables\n    IX402PaymentRouter public paymentRouter;\n    IHiveMindCoordinator public hiveMindCoordinator;\n    IERC20 public pyusd;\n    \n    // MCP registry\n    mapping(address => MCPService) public mcpServices;\n    mapping(bytes32 => MCPPaymentRequest) public paymentRequests;\n    mapping(address => bytes32[]) public mcpRequestHistory;\n    mapping(string => address[]) public tokenToMCPs; // Token symbol => MCPs accepting it\n    \n    // Service discovery\n    address[] public registeredMCPs;\n    mapping(string => bool) public supportedTokens;\n    \n    // Events\n    event MCPRegistered(\n        address indexed mcp,\n        string serviceName,\n        string[] acceptedTokens,\n        uint256 baseFee\n    );\n    \n    event PaymentRequested(\n        bytes32 indexed requestId,\n        address indexed mcp,\n        address indexed payer,\n        string requestedToken,\n        uint256 amount\n    );\n    \n    event PaymentProcessed(\n        bytes32 indexed requestId,\n        address mcp,\n        string token,\n        uint256 amount,\n        uint32 chain\n    );\n    \n    event ServiceDiscoveryUpdated(\n        address indexed mcp,\n        string[] tokens,\n        uint32[] chains\n    );\n    \n    constructor(\n        address _paymentRouter,\n        address _hiveMindCoordinator,\n        address _pyusd\n    ) Ownable(msg.sender) {\n        paymentRouter = IX402PaymentRouter(_paymentRouter);\n        hiveMindCoordinator = IHiveMindCoordinator(_hiveMindCoordinator);\n        pyusd = IERC20(_pyusd);\n        \n        _initializeSupportedTokens();\n    }\n    \n    /**\n     * @notice Initialize commonly supported tokens\n     */\n    function _initializeSupportedTokens() private {\n        supportedTokens[\"PYUSD\"] = true;\n        supportedTokens[\"USDC\"] = true;\n        supportedTokens[\"USDT\"] = true;\n        supportedTokens[\"DAI\"] = true;\n    }\n    \n    /**\n     * @notice Register MCP service\n     * @param _serviceName Name of the MCP service\n     * @param _acceptedTokens Array of accepted token symbols\n     * @param _baseFee Base fee for the service\n     * @param _supportedChains Array of supported chain IDs\n     */\n    function registerMCP(\n        string memory _serviceName,\n        string[] memory _acceptedTokens,\n        uint256 _baseFee,\n        uint32[] memory _supportedChains\n    ) external {\n        require(bytes(_serviceName).length > 0, \"Invalid service name\");\n        require(_acceptedTokens.length > 0, \"No tokens specified\");\n        require(_baseFee > 0, \"Invalid base fee\");\n        require(_supportedChains.length > 0, \"No chains specified\");\n        \n        MCPService storage mcp = mcpServices[msg.sender];\n        mcp.serviceName = _serviceName;\n        mcp.provider = msg.sender;\n        mcp.acceptedTokens = _acceptedTokens;\n        mcp.baseFee = _baseFee;\n        mcp.supportedChains = _supportedChains;\n        mcp.isActive = true;\n        \n        // Register with payment router\n        paymentRouter.registerService(_serviceName, msg.sender, _baseFee);\n        \n        // Update token mappings\n        for (uint i = 0; i < _acceptedTokens.length; i++) {\n            tokenToMCPs[_acceptedTokens[i]].push(msg.sender);\n        }\n        \n        // Register as agent in HiveMind\n        string[] memory capabilities = new string[](1);\n        capabilities[0] = _serviceName;\n        hiveMindCoordinator.registerAgent(\n            string(abi.encodePacked(\"mcp://\", _serviceName)),\n            capabilities\n        );\n        \n        registeredMCPs.push(msg.sender);\n        \n        emit MCPRegistered(msg.sender, _serviceName, _acceptedTokens, _baseFee);\n        emit ServiceDiscoveryUpdated(msg.sender, _acceptedTokens, _supportedChains);\n    }\n    \n    /**\n     * @notice Request payment for MCP service\n     * @param _mcp MCP service provider address\n     * @param _requestedToken Token requested by MCP\n     * @param _amount Payment amount\n     * @param _targetChain Target chain for payment\n     * @param _serviceData Additional service data\n     */\n    function requestMCPPayment(\n        address _mcp,\n        string memory _requestedToken,\n        uint256 _amount,\n        uint32 _targetChain,\n        bytes calldata _serviceData\n    ) external payable nonReentrant returns (bytes32 requestId) {\n        MCPService memory mcp = mcpServices[_mcp];\n        require(mcp.isActive, \"MCP not active\");\n        require(_amount >= mcp.baseFee, \"Amount below base fee\");\n        require(_isTokenAccepted(_mcp, _requestedToken), \"Token not accepted\");\n        require(_isChainSupported(_mcp, _targetChain), \"Chain not supported\");\n        \n        // Generate request ID\n        requestId = keccak256(\n            abi.encodePacked(\n                msg.sender,\n                _mcp,\n                _requestedToken,\n                _amount,\n                _targetChain,\n                block.timestamp\n            )\n        );\n        \n        // Create payment request\n        paymentRequests[requestId] = MCPPaymentRequest({\n            requestId: requestId,\n            mcp: _mcp,\n            payer: msg.sender,\n            requestedToken: _requestedToken,\n            amount: _amount,\n            targetChain: _targetChain,\n            serviceData: _serviceData,\n            timestamp: block.timestamp,\n            status: RequestStatus.Processing\n        });\n        \n        mcpRequestHistory[_mcp].push(requestId);\n        \n        emit PaymentRequested(requestId, _mcp, msg.sender, _requestedToken, _amount);\n        \n        // Process payment through router\n        _processPayment(requestId);\n        \n        return requestId;\n    }\n    \n    /**\n     * @notice Process payment through x402 router\n     */\n    function _processPayment(bytes32 _requestId) private {\n        MCPPaymentRequest storage request = paymentRequests[_requestId];\n        \n        // Transfer PYUSD from payer\n        pyusd.safeTransferFrom(request.payer, address(this), request.amount);\n        \n        // Approve router (reset allowance first for safety)\n        pyusd.safeIncreaseAllowance(address(paymentRouter), request.amount);\n        \n        // Route payment with automatic swap if needed\n        bytes32 routerRequestId = paymentRouter.requestPayment{value: msg.value}(\n            request.mcp,\n            request.amount,\n            request.requestedToken,\n            request.targetChain,\n            request.serviceData\n        );\n        \n        // Update status\n        request.status = RequestStatus.Paid;\n        \n        // Update MCP stats\n        MCPService storage mcp = mcpServices[request.mcp];\n        mcp.totalEarned += request.amount;\n        mcp.requestsServed++;\n        \n        emit PaymentProcessed(\n            _requestId,\n            request.mcp,\n            request.requestedToken,\n            request.amount,\n            request.targetChain\n        );\n    }\n    \n    /**\n     * @notice Check if token is accepted by MCP\n     */\n    function _isTokenAccepted(address _mcp, string memory _token) \n        private \n        view \n        returns (bool) \n    {\n        MCPService memory mcp = mcpServices[_mcp];\n        for (uint i = 0; i < mcp.acceptedTokens.length; i++) {\n            if (keccak256(bytes(mcp.acceptedTokens[i])) == keccak256(bytes(_token))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * @notice Check if chain is supported by MCP\n     */\n    function _isChainSupported(address _mcp, uint32 _chain) \n        private \n        view \n        returns (bool) \n    {\n        MCPService memory mcp = mcpServices[_mcp];\n        for (uint i = 0; i < mcp.supportedChains.length; i++) {\n            if (mcp.supportedChains[i] == _chain) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * @notice Get MCPs accepting specific token\n     */\n    function getMCPsByToken(string memory _token) \n        external \n        view \n        returns (address[] memory) \n    {\n        return tokenToMCPs[_token];\n    }\n    \n    /**\n     * @notice Get MCP service details\n     */\n    function getMCPService(address _mcp) \n        external \n        view \n        returns (MCPService memory) \n    {\n        return mcpServices[_mcp];\n    }\n    \n    /**\n     * @notice Get payment request details\n     */\n    function getPaymentRequest(bytes32 _requestId) \n        external \n        view \n        returns (MCPPaymentRequest memory) \n    {\n        return paymentRequests[_requestId];\n    }\n    \n    /**\n     * @notice Get MCP request history\n     */\n    function getMCPRequestHistory(address _mcp) \n        external \n        view \n        returns (bytes32[] memory) \n    {\n        return mcpRequestHistory[_mcp];\n    }\n    \n    /**\n     * @notice Update MCP service fee\n     */\n    function updateServiceFee(uint256 _newFee) external {\n        require(_newFee > 0, \"Invalid fee\");\n        MCPService storage mcp = mcpServices[msg.sender];\n        require(mcp.isActive, \"MCP not registered\");\n        \n        mcp.baseFee = _newFee;\n    }\n    \n    /**\n     * @notice Add accepted token\n     */\n    function addAcceptedToken(string memory _token) external {\n        MCPService storage mcp = mcpServices[msg.sender];\n        require(mcp.isActive, \"MCP not registered\");\n        require(supportedTokens[_token], \"Token not supported\");\n        \n        mcp.acceptedTokens.push(_token);\n        tokenToMCPs[_token].push(msg.sender);\n    }\n    \n    /**\n     * @notice Add supported chain\n     */\n    function addSupportedChain(uint32 _chain) external {\n        MCPService storage mcp = mcpServices[msg.sender];\n        require(mcp.isActive, \"MCP not registered\");\n        \n        mcp.supportedChains.push(_chain);\n    }\n    \n    /**\n     * @notice Deactivate MCP service\n     */\n    function deactivateMCP() external {\n        MCPService storage mcp = mcpServices[msg.sender];\n        require(mcp.isActive, \"MCP not active\");\n        \n        mcp.isActive = false;\n    }\n    \n    /**\n     * @notice Get all registered MCPs\n     */\n    function getRegisteredMCPs() external view returns (address[] memory) {\n        return registeredMCPs;\n    }\n    \n    /**\n     * @notice Update router address\n     */\n    function updatePaymentRouter(address _newRouter) external onlyOwner {\n        paymentRouter = IX402PaymentRouter(_newRouter);\n    }\n    \n    /**\n     * @notice Emergency withdrawal\n     */\n    function emergencyWithdraw(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n}"
    },
    "contracts/MockPYUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MockPYUSD\n * @notice Mock PayPal USD stablecoin for testing x402 payments\n * @dev Implements standard ERC20 with minting capability for testing\n */\ncontract MockPYUSD is ERC20, Ownable {\n    uint8 private constant DECIMALS = 6; // PYUSD uses 6 decimals like USDC\n    \n    mapping(address => bool) public minters;\n    mapping(address => uint256) public dailyMintLimit;\n    mapping(address => uint256) public dailyMinted;\n    mapping(address => uint256) public lastMintDay;\n    \n    event MinterAdded(address indexed minter, uint256 dailyLimit);\n    event MinterRemoved(address indexed minter);\n    event EmergencyMint(address indexed to, uint256 amount);\n    \n    constructor() ERC20(\"PayPal USD\", \"PYUSD\") Ownable(msg.sender) {\n        // Mint initial supply for testing\n        _mint(msg.sender, 1000000 * 10**DECIMALS); // 1M PYUSD\n    }\n    \n    function decimals() public pure override returns (uint8) {\n        return DECIMALS;\n    }\n    \n    /**\n     * @notice Add a minter with daily limit\n     * @param minter Address to grant minting permission\n     * @param limit Daily minting limit in PYUSD\n     */\n    function addMinter(address minter, uint256 limit) external onlyOwner {\n        minters[minter] = true;\n        dailyMintLimit[minter] = limit * 10**DECIMALS;\n        emit MinterAdded(minter, limit);\n    }\n    \n    /**\n     * @notice Remove minter permission\n     * @param minter Address to revoke minting permission\n     */\n    function removeMinter(address minter) external onlyOwner {\n        minters[minter] = false;\n        emit MinterRemoved(minter);\n    }\n    \n    /**\n     * @notice Mint PYUSD within daily limit\n     * @param to Recipient address\n     * @param amount Amount to mint (with decimals)\n     */\n    function mint(address to, uint256 amount) external {\n        require(minters[msg.sender], \"Not a minter\");\n        \n        uint256 today = block.timestamp / 1 days;\n        if (lastMintDay[msg.sender] < today) {\n            dailyMinted[msg.sender] = 0;\n            lastMintDay[msg.sender] = today;\n        }\n        \n        require(\n            dailyMinted[msg.sender] + amount <= dailyMintLimit[msg.sender],\n            \"Daily limit exceeded\"\n        );\n        \n        dailyMinted[msg.sender] += amount;\n        _mint(to, amount);\n    }\n    \n    /**\n     * @notice Emergency mint by owner (for testing)\n     * @param to Recipient address\n     * @param amount Amount to mint\n     */\n    function emergencyMint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n        emit EmergencyMint(to, amount);\n    }\n    \n    /**\n     * @notice Burn PYUSD tokens\n     * @param amount Amount to burn\n     */\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n    \n    /**\n     * @notice Get formatted balance (for UI display)\n     * @param account Address to check\n     * @return balance Balance without decimals\n     */\n    function getFormattedBalance(address account) external view returns (uint256) {\n        return balanceOf(account) / 10**DECIMALS;\n    }\n}"
    },
    "contracts/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MockUSDC\n * @notice Mock USDC token for testing\n */\ncontract MockUSDC is ERC20, Ownable {\n    constructor() ERC20(\"Mock USDC\", \"USDC\") Ownable(msg.sender) {\n        // Mint initial supply to deployer\n        _mint(msg.sender, 1000000 * 10**6); // 1M USDC (6 decimals)\n    }\n    \n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n    \n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n    \n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n}"
    },
    "contracts/PYUSDOFTAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./base/OFTCore.sol\";\n\n/**\n * @title PYUSDOFTAdapter\n * @notice LayerZero OFT Adapter for PYUSD enabling cross-chain transfers\n * @dev Maintains 6 decimal precision across all chains for PYUSD\n */\ncontract PYUSDOFTAdapter is OFTCore {\n    using SafeERC20 for IERC20;\n    \n    IERC20 public immutable pyusdToken;\n    uint8 public constant SHARED_DECIMALS = 6;\n    \n    // Chain configuration\n    mapping(uint32 => address) public chainTokenAddresses;\n    mapping(uint32 => bool) public supportedChains;\n    \n    // Events\n    event ChainConfigured(uint32 indexed eid, address tokenAddress);\n    event CrossChainTransferInitiated(\n        address indexed sender,\n        uint32 indexed dstEid,\n        address indexed recipient,\n        uint256 amount\n    );\n    \n    constructor(\n        address _pyusd,\n        address _lzEndpoint,\n        address _delegate\n    ) OFTCore(SHARED_DECIMALS, _lzEndpoint, _delegate) {\n        pyusdToken = IERC20(_pyusd);\n        \n        // Configure supported chains\n        _configureChains();\n    }\n    \n    /**\n     * @notice Configure supported chains for PYUSD transfers\n     */\n    function _configureChains() private {\n        // Base\n        supportedChains[30184] = true;\n        chainTokenAddresses[30184] = address(pyusdToken);\n        \n        // Arbitrum\n        supportedChains[30110] = true;\n        chainTokenAddresses[30110] = address(pyusdToken);\n        \n        // Ethereum\n        supportedChains[30101] = true;\n        chainTokenAddresses[30101] = address(pyusdToken);\n        \n        // Optimism\n        supportedChains[30111] = true;\n        chainTokenAddresses[30111] = address(pyusdToken);\n    }\n    \n    /**\n     * @notice Lock tokens for cross-chain transfer\n     */\n    function _debit(\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        require(supportedChains[_dstEid], \"Destination chain not supported\");\n        \n        // Transfer PYUSD from sender to this contract\n        pyusdToken.safeTransferFrom(msg.sender, address(this), _amountLD);\n        \n        // Convert to shared decimals (already 6 for PYUSD)\n        amountSentLD = _amountLD;\n        amountReceivedLD = _amountLD;\n        \n        emit CrossChainTransferInitiated(msg.sender, _dstEid, msg.sender, _amountLD);\n        \n        return (amountSentLD, amountReceivedLD);\n    }\n    \n    /**\n     * @notice Release tokens after receiving cross-chain message\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 _srcEid\n    ) internal override returns (uint256 amountReceivedLD) {\n        require(supportedChains[_srcEid], \"Source chain not supported\");\n        \n        // Transfer PYUSD to recipient\n        pyusdToken.safeTransfer(_to, _amountLD);\n        \n        return _amountLD;\n    }\n    \n    /**\n     * @notice Send PYUSD cross-chain\n     */\n    function sendPYUSD(\n        uint32 _dstEid,\n        bytes32 _to,\n        uint256 _amountLD,\n        bytes calldata _options\n    ) external payable {\n        require(supportedChains[_dstEid], \"Destination not supported\");\n        \n        _send(\n            SendParam({\n                dstEid: _dstEid,\n                to: _to,\n                amountLD: _amountLD,\n                minAmountLD: _amountLD * 99 / 100, // 1% slippage\n                extraOptions: _options,\n                composeMsg: \"\",\n                oftCmd: \"\"\n            }),\n            MessagingFee(msg.value, 0),\n            msg.sender\n        );\n    }\n    \n    /**\n     * @notice Quote fee for cross-chain transfer\n     */\n    function quoteSend(\n        uint32 _dstEid,\n        uint256 _amountLD,\n        bytes calldata _options\n    ) external view returns (MessagingFee memory fee) {\n        return _quote(\n            SendParam({\n                dstEid: _dstEid,\n                to: bytes32(uint256(uint160(msg.sender))),\n                amountLD: _amountLD,\n                minAmountLD: _amountLD * 99 / 100,\n                extraOptions: _options,\n                composeMsg: \"\",\n                oftCmd: \"\"\n            }),\n            false\n        );\n    }\n    \n    /**\n     * @notice Add support for new chain\n     */\n    function addSupportedChain(uint32 _eid, address _tokenAddress) external onlyOwner {\n        supportedChains[_eid] = true;\n        chainTokenAddresses[_eid] = _tokenAddress;\n        emit ChainConfigured(_eid, _tokenAddress);\n    }\n    \n    /**\n     * @notice Emergency token recovery\n     */\n    function recoverTokens(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n}"
    },
    "contracts/SimplePYUSDRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\n\n/**\n * @title SimplePYUSDRouter\n * @notice Simplified cross-chain PYUSD payment router for x402 services\n * @dev Handles PYUSD payments and cross-chain routing via LayerZero\n */\ncontract SimplePYUSDRouter is Ownable, ReentrancyGuard {\n    // State variables\n    IERC20 public immutable pyusd;\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    \n    // Chain configuration\n    mapping(uint32 => address) public trustedRemotes;\n    mapping(uint32 => bool) public supportedChains;\n    \n    // Service registry\n    struct Service {\n        address provider;\n        string endpoint;\n        uint256 pricePerCall;\n        address acceptedToken;\n        bool active;\n    }\n    \n    mapping(bytes32 => Service) public services;\n    mapping(address => bytes32[]) public providerServices;\n    \n    // Payment tracking\n    struct Payment {\n        bytes32 serviceId;\n        address payer;\n        uint256 amount;\n        uint32 destinationChain;\n        uint256 timestamp;\n        bool completed;\n    }\n    \n    mapping(bytes32 => Payment) public payments;\n    uint256 public paymentCounter;\n    \n    // Events\n    event ServiceRegistered(bytes32 indexed serviceId, address indexed provider, uint256 price);\n    event PaymentInitiated(bytes32 indexed paymentId, bytes32 indexed serviceId, address payer, uint256 amount);\n    event CrossChainPaymentSent(bytes32 indexed paymentId, uint32 destinationChain, bytes32 guid);\n    event PaymentCompleted(bytes32 indexed paymentId);\n    \n    constructor(address _pyusd, address _lzEndpoint) Ownable(msg.sender) {\n        pyusd = IERC20(_pyusd);\n        lzEndpoint = ILayerZeroEndpoint(_lzEndpoint);\n    }\n    \n    /**\n     * @notice Register a new x402 service\n     */\n    function registerService(\n        string calldata endpoint,\n        uint256 pricePerCall,\n        address acceptedToken\n    ) external returns (bytes32 serviceId) {\n        serviceId = keccak256(abi.encodePacked(msg.sender, endpoint, block.timestamp));\n        \n        services[serviceId] = Service({\n            provider: msg.sender,\n            endpoint: endpoint,\n            pricePerCall: pricePerCall,\n            acceptedToken: acceptedToken,\n            active: true\n        });\n        \n        providerServices[msg.sender].push(serviceId);\n        emit ServiceRegistered(serviceId, msg.sender, pricePerCall);\n    }\n    \n    /**\n     * @notice Pay for a service with PYUSD\n     */\n    function payForService(\n        bytes32 serviceId,\n        uint32 destinationChain\n    ) external payable nonReentrant returns (bytes32 paymentId) {\n        Service memory service = services[serviceId];\n        require(service.active, \"Service not active\");\n        \n        // Transfer PYUSD from payer\n        require(\n            pyusd.transferFrom(msg.sender, address(this), service.pricePerCall),\n            \"PYUSD transfer failed\"\n        );\n        \n        // Create payment record\n        paymentId = keccak256(abi.encodePacked(paymentCounter++, msg.sender, block.timestamp));\n        payments[paymentId] = Payment({\n            serviceId: serviceId,\n            payer: msg.sender,\n            amount: service.pricePerCall,\n            destinationChain: destinationChain,\n            timestamp: block.timestamp,\n            completed: false\n        });\n        \n        emit PaymentInitiated(paymentId, serviceId, msg.sender, service.pricePerCall);\n        \n        // If cross-chain, initiate LayerZero transfer\n        if (destinationChain != 0 && destinationChain != block.chainid) {\n            _sendCrossChainPayment(paymentId, service, destinationChain);\n        } else {\n            // Direct payment on same chain\n            _completePayment(paymentId, service);\n        }\n    }\n    \n    /**\n     * @notice Send cross-chain payment via LayerZero\n     */\n    function _sendCrossChainPayment(\n        bytes32 paymentId,\n        Service memory service,\n        uint32 destinationChain\n    ) private {\n        require(supportedChains[destinationChain], \"Chain not supported\");\n        require(trustedRemotes[destinationChain] != address(0), \"Remote not set\");\n        \n        // Encode payment message\n        bytes memory payload = abi.encode(\n            paymentId,\n            service.provider,\n            service.pricePerCall,\n            service.acceptedToken\n        );\n        \n        // Prepare LayerZero message\n        ILayerZeroEndpoint.MessagingParams memory params = ILayerZeroEndpoint.MessagingParams({\n            dstEid: destinationChain,\n            receiver: bytes32(uint256(uint160(trustedRemotes[destinationChain]))),\n            message: payload,\n            options: abi.encodePacked(uint16(1), uint256(200000)), // Gas limit\n            payInLzToken: false\n        });\n        \n        // Quote and send\n        ILayerZeroEndpoint.MessagingFee memory fee = lzEndpoint.quote(params, address(this));\n        require(msg.value >= fee.nativeFee, \"Insufficient fee\");\n        \n        ILayerZeroEndpoint.MessagingReceipt memory receipt = lzEndpoint.send{value: fee.nativeFee}(\n            params,\n            msg.sender\n        );\n        \n        emit CrossChainPaymentSent(paymentId, destinationChain, receipt.guid);\n    }\n    \n    /**\n     * @notice Complete payment on current chain\n     */\n    function _completePayment(bytes32 paymentId, Service memory service) private {\n        // Transfer to service provider\n        require(\n            pyusd.transfer(service.provider, service.pricePerCall),\n            \"Provider payment failed\"\n        );\n        \n        payments[paymentId].completed = true;\n        emit PaymentCompleted(paymentId);\n    }\n    \n    /**\n     * @notice Receive cross-chain message from LayerZero\n     */\n    function lzReceive(\n        ILayerZeroEndpoint.Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external {\n        require(msg.sender == address(lzEndpoint), \"Invalid endpoint\");\n        require(trustedRemotes[_origin.srcEid] != address(0), \"Untrusted source\");\n        \n        // Decode and process payment\n        (bytes32 paymentId, address provider, uint256 amount, address token) = \n            abi.decode(_message, (bytes32, address, uint256, address));\n        \n        // Handle token swap if needed\n        if (token != address(pyusd)) {\n            // Swap PYUSD to requested token\n            _swapAndTransfer(provider, amount, token);\n        } else {\n            // Direct PYUSD transfer\n            require(pyusd.transfer(provider, amount), \"Transfer failed\");\n        }\n        \n        emit PaymentCompleted(paymentId);\n    }\n    \n    /**\n     * @notice Swap PYUSD to requested token and transfer\n     */\n    function _swapAndTransfer(address recipient, uint256 amount, address targetToken) private {\n        // Simplified swap logic - in production would integrate with DEX\n        // For now, just transfer PYUSD\n        require(pyusd.transfer(recipient, amount), \"Transfer failed\");\n    }\n    \n    // Admin functions\n    function setTrustedRemote(uint32 _chainId, address _remote) external onlyOwner {\n        trustedRemotes[_chainId] = _remote;\n        supportedChains[_chainId] = true;\n    }\n    \n    function withdrawStuckTokens(address token, uint256 amount) external onlyOwner {\n        IERC20(token).transfer(owner(), amount);\n    }\n}"
    },
    "contracts/TestContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ncontract TestContract {\n    string public name = \"Test\";\n    \n    function getName() public view returns (string memory) {\n        return name;\n    }\n}"
    },
    "contracts/TokenSwapComposer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n// LayerZero interfaces\n\n/**\n * @title TokenSwapComposer\n * @notice LayerZero Composer for automatic token swaps after cross-chain transfers\n * @dev Receives PYUSD via LayerZero and swaps to requested token\n */\ninterface IOAppComposer {\n    function lzCompose(\n        address _from,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable;\n}\n\ninterface ILayerZeroEndpointV2 {\n    function send(\n        uint32 _dstEid,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable returns (bytes32);\n}\n\ncontract TokenSwapComposer is IOAppComposer, Ownable {\n    using SafeERC20 for IERC20;\n    \n    ILayerZeroEndpointV2 public immutable endpoint;\n    address public immutable pyusd;\n    \n    // Swap configuration\n    mapping(address => address) public swapRouters; // token => DEX router\n    mapping(address => bool) public supportedTokens;\n    mapping(bytes32 => address) public oAppRegistry;\n    \n    // Events\n    event SwapExecuted(\n        address indexed recipient,\n        address indexed fromToken,\n        address indexed toToken,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n    \n    event OAppRegistered(bytes32 indexed oApp, address indexed implementation);\n    \n    constructor(\n        address _endpoint,\n        address _pyusd,\n        address _owner\n    ) Ownable(_owner) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n        pyusd = _pyusd;\n        \n        // Configure default supported tokens\n        _configureSupportedTokens();\n    }\n    \n    /**\n     * @notice Configure default supported tokens and DEX routers\n     */\n    function _configureSupportedTokens() private {\n        // USDC\n        supportedTokens[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = true;\n        // USDT\n        supportedTokens[0xdAC17F958D2ee523a2206206994597C13D831ec7] = true;\n        // WETH\n        supportedTokens[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] = true;\n    }\n    \n    /**\n     * @notice Compose receiver for LayerZero messages\n     */\n    function lzCompose(\n        address _from,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable override {\n        require(msg.sender == address(endpoint), \"Only endpoint\");\n        require(oAppRegistry[bytes32(uint256(uint160(_from)))] != address(0), \"Unknown OApp\");\n        \n        // Decode the composed message\n        (\n            address recipient,\n            uint256 amountLD,\n            address targetToken,\n            uint256 minAmountOut\n        ) = abi.decode(_message, (address, uint256, address, uint256));\n        \n        // Execute the swap\n        _executeSwap(recipient, amountLD, targetToken, minAmountOut);\n    }\n    \n    /**\n     * @notice Execute token swap from PYUSD to target token\n     */\n    function _executeSwap(\n        address recipient,\n        uint256 amountIn,\n        address targetToken,\n        uint256 minAmountOut\n    ) private {\n        require(supportedTokens[targetToken], \"Token not supported\");\n        \n        if (targetToken == pyusd) {\n            // No swap needed, direct transfer\n            IERC20(pyusd).safeTransfer(recipient, amountIn);\n            emit SwapExecuted(recipient, pyusd, pyusd, amountIn, amountIn);\n            return;\n        }\n        \n        // Get DEX router for target token\n        address router = swapRouters[targetToken];\n        require(router != address(0), \"No router configured\");\n        \n        // Approve router to spend PYUSD\n        IERC20(pyusd).safeIncreaseAllowance(router, amountIn);\n        \n        // Execute swap (simplified - would integrate with actual DEX)\n        uint256 amountOut = _performSwap(router, pyusd, targetToken, amountIn, minAmountOut);\n        \n        // Transfer swapped tokens to recipient\n        IERC20(targetToken).safeTransfer(recipient, amountOut);\n        \n        emit SwapExecuted(recipient, pyusd, targetToken, amountIn, amountOut);\n    }\n    \n    /**\n     * @notice Perform actual swap on DEX\n     */\n    function _performSwap(\n        address router,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut\n    ) private returns (uint256 amountOut) {\n        // Simplified swap logic - in production would call actual DEX\n        // For demo, return minAmountOut\n        return minAmountOut;\n    }\n    \n    /**\n     * @notice Register OApp for composition\n     */\n    function registerOApp(bytes32 _oApp, address _implementation) external onlyOwner {\n        oAppRegistry[_oApp] = _implementation;\n        emit OAppRegistered(_oApp, _implementation);\n    }\n    \n    /**\n     * @notice Add supported token\n     */\n    function addSupportedToken(address _token, address _router) external onlyOwner {\n        supportedTokens[_token] = true;\n        swapRouters[_token] = _router;\n    }\n    \n    /**\n     * @notice Quote swap for planning\n     */\n    function quoteSwap(\n        uint256 amountIn,\n        address targetToken\n    ) external view returns (uint256 expectedOut) {\n        if (targetToken == pyusd) {\n            return amountIn;\n        }\n        \n        // In production, would query DEX for actual quote\n        // For demo, return 1:1 ratio with 1% slippage\n        return amountIn * 99 / 100;\n    }\n    \n    /**\n     * @notice Emergency token recovery\n     */\n    function recoverTokens(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n}"
    },
    "contracts/X402PaymentRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./base/OApp.sol\";\n\n/**\n * @title X402PaymentRouter\n * @notice Main payment router for x402 microservices with LayerZero integration\n * @dev Routes PYUSD payments cross-chain with automatic token swapping\n */\ncontract X402PaymentRouter is OApp, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    \n    // Core components\n    IERC20 public immutable pyusd;\n    address public tokenSwapComposer;\n    address public pyusdOFTAdapter;\n    \n    // Service registry\n    struct Service {\n        address provider;\n        string endpoint;\n        uint256 pricePerCall;\n        address[] acceptedTokens;\n        uint32[] supportedChains;\n        bool active;\n    }\n    \n    struct PaymentRequest {\n        bytes32 serviceId;\n        address payer;\n        address serviceProvider;\n        uint256 amount;\n        address requestedToken;\n        uint32 destinationChain;\n        uint256 timestamp;\n        bool completed;\n    }\n    \n    // State\n    mapping(bytes32 => Service) public services;\n    mapping(address => bytes32[]) public providerServices;\n    mapping(bytes32 => PaymentRequest) public paymentRequests;\n    uint256 public requestCounter;\n    \n    // Events\n    event ServiceRegistered(\n        bytes32 indexed serviceId,\n        address indexed provider,\n        uint256 price\n    );\n    \n    event PaymentRequested(\n        bytes32 indexed requestId,\n        bytes32 indexed serviceId,\n        address payer,\n        uint256 amount,\n        address requestedToken,\n        uint32 destinationChain\n    );\n    \n    event PaymentCompleted(bytes32 indexed requestId);\n    \n    event CrossChainPaymentSent(\n        bytes32 indexed requestId,\n        uint32 destinationChain,\n        bytes32 guid\n    );\n    \n    constructor(\n        address _pyusd,\n        address _endpoint,\n        address _delegate\n    ) OApp(_endpoint, _delegate) {\n        pyusd = IERC20(_pyusd);\n    }\n    \n    /**\n     * @notice Register x402 service\n     */\n    function registerService(\n        string calldata _endpoint,\n        uint256 _pricePerCall,\n        address[] calldata _acceptedTokens,\n        uint32[] calldata _supportedChains\n    ) external returns (bytes32 serviceId) {\n        serviceId = keccak256(abi.encodePacked(msg.sender, _endpoint, block.timestamp));\n        \n        services[serviceId] = Service({\n            provider: msg.sender,\n            endpoint: _endpoint,\n            pricePerCall: _pricePerCall,\n            acceptedTokens: _acceptedTokens,\n            supportedChains: _supportedChains,\n            active: true\n        });\n        \n        providerServices[msg.sender].push(serviceId);\n        emit ServiceRegistered(serviceId, msg.sender, _pricePerCall);\n    }\n    \n    /**\n     * @notice Request payment for x402 service\n     */\n    function requestPayment(\n        bytes32 _serviceId,\n        address _requestedToken,\n        uint32 _destinationChain,\n        bytes calldata _options\n    ) external payable nonReentrant returns (bytes32 requestId) {\n        Service memory service = services[_serviceId];\n        require(service.active, \"Service not active\");\n        require(_isTokenAccepted(service, _requestedToken), \"Token not accepted\");\n        require(_isChainSupported(service, _destinationChain), \"Chain not supported\");\n        \n        // Transfer PYUSD from payer\n        pyusd.safeTransferFrom(msg.sender, address(this), service.pricePerCall);\n        \n        // Create payment request\n        requestId = keccak256(abi.encodePacked(requestCounter++, msg.sender, block.timestamp));\n        paymentRequests[requestId] = PaymentRequest({\n            serviceId: _serviceId,\n            payer: msg.sender,\n            serviceProvider: service.provider,\n            amount: service.pricePerCall,\n            requestedToken: _requestedToken,\n            destinationChain: _destinationChain,\n            timestamp: block.timestamp,\n            completed: false\n        });\n        \n        emit PaymentRequested(\n            requestId,\n            _serviceId,\n            msg.sender,\n            service.pricePerCall,\n            _requestedToken,\n            _destinationChain\n        );\n        \n        // Route payment\n        if (_requestedToken != address(pyusd) || _destinationChain != block.chainid) {\n            _routeWithSwap(requestId, paymentRequests[requestId], _options);\n        } else {\n            _routeDirectPayment(requestId, paymentRequests[requestId]);\n        }\n    }\n    \n    /**\n     * @notice Route payment with token swap via LayerZero\n     */\n    function _routeWithSwap(\n        bytes32 requestId,\n        PaymentRequest memory request,\n        bytes calldata _options\n    ) private {\n        // Prepare composed message for swap\n        bytes memory composeMsg = abi.encode(\n            request.serviceProvider,\n            request.amount,\n            request.requestedToken,\n            request.amount * 99 / 100 // 1% slippage\n        );\n        \n        // Send via LayerZero with composition\n        bytes32 guid = _lzSend(\n            request.destinationChain,\n            abi.encode(requestId, request.serviceProvider, request.amount),\n            _options,\n            MessagingFee(msg.value, 0),\n            payable(msg.sender),\n            composeMsg\n        );\n        \n        emit CrossChainPaymentSent(requestId, request.destinationChain, guid);\n    }\n    \n    /**\n     * @notice Route direct PYUSD payment on same chain\n     */\n    function _routeDirectPayment(bytes32 requestId, PaymentRequest memory request) private {\n        pyusd.safeTransfer(request.serviceProvider, request.amount);\n        paymentRequests[requestId].completed = true;\n        emit PaymentCompleted(requestId);\n    }\n    \n    /**\n     * @notice Receive cross-chain payment confirmation\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal override {\n        (bytes32 requestId, address provider, uint256 amount) = \n            abi.decode(_message, (bytes32, address, uint256));\n        \n        // Mark payment as completed\n        paymentRequests[requestId].completed = true;\n        emit PaymentCompleted(requestId);\n    }\n    \n    /**\n     * @notice Check if token is accepted by service\n     */\n    function _isTokenAccepted(\n        Service memory service,\n        address token\n    ) private pure returns (bool) {\n        for (uint i = 0; i < service.acceptedTokens.length; i++) {\n            if (service.acceptedTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * @notice Check if chain is supported by service\n     */\n    function _isChainSupported(\n        Service memory service,\n        uint32 chainId\n    ) private pure returns (bool) {\n        for (uint i = 0; i < service.supportedChains.length; i++) {\n            if (service.supportedChains[i] == chainId) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * @notice Quote cross-chain payment fee\n     */\n    function quotePayment(\n        bytes32 _serviceId,\n        uint32 _destinationChain,\n        bytes calldata _options\n    ) external view returns (MessagingFee memory fee) {\n        Service memory service = services[_serviceId];\n        \n        return _quote(\n            _destinationChain,\n            abi.encode(_serviceId, service.provider, service.pricePerCall),\n            _options,\n            false\n        );\n    }\n    \n    /**\n     * @notice Set token swap composer address\n     */\n    function setTokenSwapComposer(address _composer) external onlyOwner {\n        tokenSwapComposer = _composer;\n    }\n    \n    /**\n     * @notice Set PYUSD OFT adapter address\n     */\n    function setPYUSDOFTAdapter(address _adapter) external onlyOwner {\n        pyusdOFTAdapter = _adapter;\n    }\n    \n    /**\n     * @notice Update service status\n     */\n    function updateServiceStatus(bytes32 _serviceId, bool _active) external {\n        require(services[_serviceId].provider == msg.sender, \"Not service owner\");\n        services[_serviceId].active = _active;\n    }\n    \n    /**\n     * @notice Emergency token recovery\n     */\n    function recoverTokens(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}