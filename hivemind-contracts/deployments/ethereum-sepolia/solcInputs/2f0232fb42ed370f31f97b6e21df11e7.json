{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/UniswapV4SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Interfaces\ninterface IUniversalRouter {\n    function execute(bytes calldata commands, bytes[] calldata inputs) external payable;\n}\n\ninterface IQuoter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n    \n    function quoteExactInputSingle(\n        ExactInputSingleParams memory params\n    ) external returns (uint256 amountOut);\n}\n\ninterface IPoolManager {\n    struct PoolKey {\n        address currency0;\n        address currency1;\n        uint24 fee;\n        int24 tickSpacing;\n        address hooks;\n    }\n    \n    struct SwapParams {\n        PoolKey poolKey;\n        bool zeroForOne;\n        int256 amountSpecified;\n        uint160 sqrtPriceLimitX96;\n        bytes hookData;\n    }\n    \n    function swap(\n        PoolKey memory key,\n        SwapParams memory params,\n        bytes calldata hookData\n    ) external returns (int256 amount0, int256 amount1);\n    \n    function initialize(\n        PoolKey memory key,\n        uint160 sqrtPriceX96,\n        bytes calldata hookData\n    ) external returns (int24 tick);\n}\n\ninterface IPermit2 {\n    struct PermitSingle {\n        address token;\n        uint256 amount;\n        uint256 expiration;\n        uint256 nonce;\n    }\n    \n    function permit(\n        address owner,\n        PermitSingle memory permitSingle,\n        bytes calldata signature\n    ) external;\n    \n    function approve(\n        address token,\n        address spender,\n        uint160 amount,\n        uint48 expiration\n    ) external;\n}\n\n/// @title UniswapV4SwapRouter\n/// @notice Production-ready token swap router using Uniswap V4 on Sepolia\n/// @dev Integrates with deployed Uniswap V4 PoolManager and Universal Router\ncontract UniswapV4SwapRouter is Ownable {\n    using SafeERC20 for IERC20;\n\n    // Uniswap V4 Sepolia Deployments\n    address public constant POOL_MANAGER = 0xE03A1074c86CFeDd5C142C4F04F1a1536e203543;\n    address public constant UNIVERSAL_ROUTER = 0x3A9D48AB9751398BbFa63ad67599Bb04e4BdF98b;\n    address public constant POSITION_MANAGER = 0x429ba70129df741B2Ca2a85BC3A2a3328e5c09b4;\n    address public constant QUOTER = 0x61B3f2011A92d183C7dbaDBdA940a7555Ccf9227;\n    address public constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\n    \n    // Using structs from interfaces\n    \n    // Events\n    event SwapExecuted(\n        address indexed user,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n    \n    event PoolConfigured(\n        address indexed token0,\n        address indexed token1,\n        uint24 fee,\n        int24 tickSpacing\n    );\n    \n    // State variables\n    uint256 public slippageTolerance = 300; // 3% default\n    uint256 public constant BASIS_POINTS = 10000;\n    \n    // Pool configurations\n    mapping(bytes32 => IPoolManager.PoolKey) public poolKeys;\n    mapping(address => mapping(address => bytes32)) public poolKeyIds;\n    \n    // Universal Router command encodings\n    bytes private constant COMMANDS_SWAP = hex\"00\"; // V4_SWAP\n    bytes private constant COMMANDS_SETTLE = hex\"10\"; // SETTLE\n    bytes private constant COMMANDS_TAKE = hex\"11\"; // TAKE\n    \n    constructor(address _owner) Ownable(_owner) {\n        // Verify deployed contracts exist\n        require(UNIVERSAL_ROUTER.code.length > 0, \"Universal Router not deployed\");\n        require(POOL_MANAGER.code.length > 0, \"Pool Manager not deployed\");\n        require(PERMIT2.code.length > 0, \"Permit2 not deployed\");\n    }\n    \n    /// @notice Configure a pool for swapping\n    /// @param tokenA First token address\n    /// @param tokenB Second token address  \n    /// @param fee Pool fee tier (500 = 0.05%, 3000 = 0.3%, 10000 = 1%)\n    /// @param tickSpacing Pool tick spacing\n    /// @param hooks Hook contract address (use address(0) for no hooks)\n    function configurePool(\n        address tokenA,\n        address tokenB,\n        uint24 fee,\n        int24 tickSpacing,\n        address hooks\n    ) external onlyOwner {\n        require(tokenA != tokenB, \"Identical tokens\");\n        require(fee == 500 || fee == 3000 || fee == 10000, \"Invalid fee tier\");\n        \n        // Order tokens\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        \n        IPoolManager.PoolKey memory poolKey = IPoolManager.PoolKey({\n            currency0: token0,\n            currency1: token1,\n            fee: fee,\n            tickSpacing: tickSpacing,\n            hooks: hooks\n        });\n        \n        bytes32 poolKeyId = keccak256(abi.encode(token0, token1, fee));\n        poolKeys[poolKeyId] = poolKey;\n        poolKeyIds[token0][token1] = poolKeyId;\n        poolKeyIds[token1][token0] = poolKeyId;\n        \n        emit PoolConfigured(token0, token1, fee, tickSpacing);\n    }\n    \n    /// @notice Execute a token swap with exact input through Universal Router\n    /// @param tokenIn Input token address\n    /// @param tokenOut Output token address\n    /// @param amountIn Input token amount\n    /// @param amountOutMinimum Minimum output amount\n    /// @param recipient Recipient address\n    /// @return amountOut The actual output amount\n    function swapExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMinimum,\n        address recipient\n    ) external returns (uint256 amountOut) {\n        require(amountIn > 0, \"Invalid input amount\");\n        require(recipient != address(0), \"Invalid recipient\");\n        \n        // Get pool configuration\n        bytes32 poolKeyId = poolKeyIds[tokenIn][tokenOut];\n        require(poolKeyId != bytes32(0), \"Pool not configured\");\n        \n        IPoolManager.PoolKey memory poolKey = poolKeys[poolKeyId];\n        \n        // Transfer tokens from sender to this contract\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\n        \n        // Approve Permit2 to spend tokens\n        IERC20(tokenIn).safeIncreaseAllowance(PERMIT2, amountIn);\n        \n        // Approve Universal Router through Permit2\n        IPermit2(PERMIT2).approve(\n            tokenIn,\n            UNIVERSAL_ROUTER,\n            uint160(amountIn),\n            uint48(block.timestamp + 3600) // 1 hour expiration\n        );\n        \n        // Encode swap parameters for Universal Router\n        bytes memory commands = abi.encodePacked(\n            COMMANDS_SWAP,    // Execute swap\n            COMMANDS_SETTLE,  // Settle tokens\n            COMMANDS_TAKE     // Take output tokens\n        );\n        \n        // Prepare swap inputs\n        bool zeroForOne = tokenIn == poolKey.currency0;\n        \n        bytes[] memory inputs = new bytes[](3);\n        \n        // Encode V4_SWAP parameters\n        inputs[0] = abi.encode(\n            poolKey,\n            zeroForOne,\n            int256(amountIn),\n            uint160(0), // No price limit\n            bytes(\"\") // No hook data\n        );\n        \n        // Encode SETTLE parameters (settle all input tokens)\n        inputs[1] = abi.encode(tokenIn, amountIn, true); // payerIsUser = true\n        \n        // Encode TAKE parameters (take all output tokens)\n        inputs[2] = abi.encode(tokenOut, recipient, amountOutMinimum);\n        \n        // Execute swap through Universal Router\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(recipient);\n        \n        IUniversalRouter(UNIVERSAL_ROUTER).execute(commands, inputs);\n        \n        uint256 balanceAfter = IERC20(tokenOut).balanceOf(recipient);\n        amountOut = balanceAfter - balanceBefore;\n        \n        require(amountOut >= amountOutMinimum, \"Insufficient output amount\");\n        \n        emit SwapExecuted(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\n    }\n    \n    /// @notice Get quote for swap through Quoter contract\n    /// @param tokenIn Input token\n    /// @param tokenOut Output token\n    /// @param amountIn Input amount\n    /// @return amountOut Estimated output amount\n    function getQuote(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external returns (uint256 amountOut) {\n        bytes32 poolKeyId = poolKeyIds[tokenIn][tokenOut];\n        require(poolKeyId != bytes32(0), \"Pool not configured\");\n        \n        IPoolManager.PoolKey memory poolKey = poolKeys[poolKeyId];\n        \n        IQuoter.ExactInputSingleParams memory params = IQuoter.ExactInputSingleParams({\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            fee: poolKey.fee,\n            recipient: address(this),\n            amountIn: amountIn,\n            amountOutMinimum: 0,\n            sqrtPriceLimitX96: 0\n        });\n        \n        // Call quoter for accurate quote\n        amountOut = IQuoter(QUOTER).quoteExactInputSingle(params);\n        \n        // Apply slippage tolerance\n        uint256 slippageAmount = (amountOut * slippageTolerance) / BASIS_POINTS;\n        amountOut = amountOut - slippageAmount;\n    }\n    \n    /// @notice Initialize a pool with starting price\n    /// @param tokenA First token\n    /// @param tokenB Second token\n    /// @param fee Fee tier\n    /// @param sqrtPriceX96 Initial sqrt price\n    function initializePool(\n        address tokenA,\n        address tokenB,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external onlyOwner {\n        bytes32 poolKeyId = poolKeyIds[tokenA][tokenB];\n        require(poolKeyId != bytes32(0), \"Pool not configured\");\n        \n        IPoolManager.PoolKey memory poolKey = poolKeys[poolKeyId];\n        \n        IPoolManager(POOL_MANAGER).initialize(\n            poolKey,\n            sqrtPriceX96,\n            bytes(\"\")\n        );\n    }\n    \n    /// @notice Direct swap through PoolManager for advanced users\n    /// @param tokenIn Input token\n    /// @param tokenOut Output token\n    /// @param amountIn Amount to swap\n    /// @param minAmountOut Minimum output\n    /// @return amountOut Output amount\n    function directPoolSwap(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut\n    ) external returns (uint256 amountOut) {\n        bytes32 poolKeyId = poolKeyIds[tokenIn][tokenOut];\n        require(poolKeyId != bytes32(0), \"Pool not configured\");\n        \n        IPoolManager.PoolKey memory poolKey = poolKeys[poolKeyId];\n        bool zeroForOne = tokenIn == poolKey.currency0;\n        \n        // Transfer tokens\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\n        IERC20(tokenIn).safeIncreaseAllowance(POOL_MANAGER, amountIn);\n        \n        // Prepare swap params\n        IPoolManager.SwapParams memory params = IPoolManager.SwapParams({\n            poolKey: poolKey,\n            zeroForOne: zeroForOne,\n            amountSpecified: int256(amountIn),\n            sqrtPriceLimitX96: 0,\n            hookData: bytes(\"\")\n        });\n        \n        // Execute swap\n        (int256 amount0, int256 amount1) = IPoolManager(POOL_MANAGER).swap(\n            poolKey,\n            params,\n            bytes(\"\")\n        );\n        \n        // Calculate output\n        amountOut = uint256(zeroForOne ? -amount1 : -amount0);\n        require(amountOut >= minAmountOut, \"Slippage exceeded\");\n        \n        // Transfer output tokens\n        IERC20(tokenOut).safeTransfer(msg.sender, amountOut);\n        \n        emit SwapExecuted(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\n    }\n    \n    /// @notice Update slippage tolerance\n    /// @param _slippageTolerance New slippage tolerance in basis points\n    function setSlippageTolerance(uint256 _slippageTolerance) external onlyOwner {\n        require(_slippageTolerance <= 1000, \"Slippage too high\"); // Max 10%\n        slippageTolerance = _slippageTolerance;\n    }\n    \n    /// @notice Check if a pool is configured\n    /// @param tokenA First token\n    /// @param tokenB Second token\n    /// @return bool True if pool exists\n    function hasPool(address tokenA, address tokenB) external view returns (bool) {\n        return poolKeyIds[tokenA][tokenB] != bytes32(0);\n    }\n    \n    /// @notice Get pool details\n    /// @param tokenA First token\n    /// @param tokenB Second token\n    /// @return poolKey The pool configuration\n    function getPool(address tokenA, address tokenB) external view returns (IPoolManager.PoolKey memory) {\n        bytes32 poolKeyId = poolKeyIds[tokenA][tokenB];\n        require(poolKeyId != bytes32(0), \"Pool not found\");\n        return poolKeys[poolKeyId];\n    }\n    \n    /// @notice Emergency token recovery\n    /// @param token Token address\n    /// @param amount Amount to recover\n    function recoverToken(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}