{
  "address": "0x72924Fa9C3dB52fbFC6581979226340B996F3487",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "ChainConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CrossChainTransferInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SHARED_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "addSupportedChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chainTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyusdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "quoteSend",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct OFTCore.MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_to",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "sendPYUSD",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad4ad43d774ca9a5f3f934a293e5538d2aa4fb0a363caab006bd10386685c1b6",
  "receipt": {
    "to": null,
    "from": "0x333774891681e69093bE0000b8f9Db0d280Ae6Ed",
    "contractAddress": "0x72924Fa9C3dB52fbFC6581979226340B996F3487",
    "transactionIndex": 187,
    "gasUsed": "896606",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000004000000000000000000000000000000000000000000000000000000004000000000000000000001000020002000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbca911a484d2737e7cc41ee5db667514c0e78c5f9123139db2adea38760a0c54",
    "transactionHash": "0xad4ad43d774ca9a5f3f934a293e5538d2aa4fb0a363caab006bd10386685c1b6",
    "logs": [
      {
        "transactionIndex": 187,
        "blockNumber": 9000754,
        "transactionHash": "0xad4ad43d774ca9a5f3f934a293e5538d2aa4fb0a363caab006bd10386685c1b6",
        "address": "0x72924Fa9C3dB52fbFC6581979226340B996F3487",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000333774891681e69093be0000b8f9db0d280ae6ed"
        ],
        "data": "0x",
        "logIndex": 300,
        "blockHash": "0xbca911a484d2737e7cc41ee5db667514c0e78c5f9123139db2adea38760a0c54"
      }
    ],
    "blockNumber": 9000754,
    "cumulativeGasUsed": "16848893",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8f8863423c13844c042Ef85708607D094a05B2bE",
    "0x0000000000000000000000000000000000000000",
    "0x333774891681e69093bE0000b8f9Db0d280Ae6Ed"
  ],
  "numDeployments": 1,
  "solcInputHash": "ae6eb21eb1f9879ea2d05131cef739be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ChainConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CrossChainTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SHARED_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chainTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyusdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"quoteSend\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTCore.MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendPYUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Maintains 6 decimal precision across all chains for PYUSD\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PYUSDOFTAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSupportedChain(uint32,address)\":{\"notice\":\"Add support for new chain\"},\"quoteSend(uint32,uint256,bytes)\":{\"notice\":\"Quote fee for cross-chain transfer\"},\"recoverTokens(address,uint256)\":{\"notice\":\"Emergency token recovery\"},\"sendPYUSD(uint32,bytes32,uint256,bytes)\":{\"notice\":\"Send PYUSD cross-chain\"}},\"notice\":\"LayerZero OFT Adapter for PYUSD enabling cross-chain transfers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PYUSDOFTAdapter.sol\":\"PYUSDOFTAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/PYUSDOFTAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./base/OFTCore.sol\\\";\\n\\n/**\\n * @title PYUSDOFTAdapter\\n * @notice LayerZero OFT Adapter for PYUSD enabling cross-chain transfers\\n * @dev Maintains 6 decimal precision across all chains for PYUSD\\n */\\ncontract PYUSDOFTAdapter is OFTCore {\\n    using SafeERC20 for IERC20;\\n    \\n    IERC20 public immutable pyusdToken;\\n    uint8 public constant SHARED_DECIMALS = 6;\\n    \\n    // Chain configuration\\n    mapping(uint32 => address) public chainTokenAddresses;\\n    mapping(uint32 => bool) public supportedChains;\\n    \\n    // Events\\n    event ChainConfigured(uint32 indexed eid, address tokenAddress);\\n    event CrossChainTransferInitiated(\\n        address indexed sender,\\n        uint32 indexed dstEid,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n    \\n    constructor(\\n        address _pyusd,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFTCore(SHARED_DECIMALS, _lzEndpoint, _delegate) {\\n        pyusdToken = IERC20(_pyusd);\\n        \\n        // Configure supported chains\\n        _configureChains();\\n    }\\n    \\n    /**\\n     * @notice Configure supported chains for PYUSD transfers\\n     */\\n    function _configureChains() private {\\n        // Base\\n        supportedChains[30184] = true;\\n        chainTokenAddresses[30184] = address(pyusdToken);\\n        \\n        // Arbitrum\\n        supportedChains[30110] = true;\\n        chainTokenAddresses[30110] = address(pyusdToken);\\n        \\n        // Ethereum\\n        supportedChains[30101] = true;\\n        chainTokenAddresses[30101] = address(pyusdToken);\\n        \\n        // Optimism\\n        supportedChains[30111] = true;\\n        chainTokenAddresses[30111] = address(pyusdToken);\\n    }\\n    \\n    /**\\n     * @notice Lock tokens for cross-chain transfer\\n     */\\n    function _debit(\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 _dstEid\\n    ) internal override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\\n        require(supportedChains[_dstEid], \\\"Destination chain not supported\\\");\\n        \\n        // Transfer PYUSD from sender to this contract\\n        pyusdToken.safeTransferFrom(msg.sender, address(this), _amountLD);\\n        \\n        // Convert to shared decimals (already 6 for PYUSD)\\n        amountSentLD = _amountLD;\\n        amountReceivedLD = _amountLD;\\n        \\n        emit CrossChainTransferInitiated(msg.sender, _dstEid, msg.sender, _amountLD);\\n        \\n        return (amountSentLD, amountReceivedLD);\\n    }\\n    \\n    /**\\n     * @notice Release tokens after receiving cross-chain message\\n     */\\n    function _credit(\\n        address _to,\\n        uint256 _amountLD,\\n        uint32 _srcEid\\n    ) internal override returns (uint256 amountReceivedLD) {\\n        require(supportedChains[_srcEid], \\\"Source chain not supported\\\");\\n        \\n        // Transfer PYUSD to recipient\\n        pyusdToken.safeTransfer(_to, _amountLD);\\n        \\n        return _amountLD;\\n    }\\n    \\n    /**\\n     * @notice Send PYUSD cross-chain\\n     */\\n    function sendPYUSD(\\n        uint32 _dstEid,\\n        bytes32 _to,\\n        uint256 _amountLD,\\n        bytes calldata _options\\n    ) external payable {\\n        require(supportedChains[_dstEid], \\\"Destination not supported\\\");\\n        \\n        _send(\\n            SendParam({\\n                dstEid: _dstEid,\\n                to: _to,\\n                amountLD: _amountLD,\\n                minAmountLD: _amountLD * 99 / 100, // 1% slippage\\n                extraOptions: _options,\\n                composeMsg: \\\"\\\",\\n                oftCmd: \\\"\\\"\\n            }),\\n            MessagingFee(msg.value, 0),\\n            msg.sender\\n        );\\n    }\\n    \\n    /**\\n     * @notice Quote fee for cross-chain transfer\\n     */\\n    function quoteSend(\\n        uint32 _dstEid,\\n        uint256 _amountLD,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory fee) {\\n        return _quote(\\n            SendParam({\\n                dstEid: _dstEid,\\n                to: bytes32(uint256(uint160(msg.sender))),\\n                amountLD: _amountLD,\\n                minAmountLD: _amountLD * 99 / 100,\\n                extraOptions: _options,\\n                composeMsg: \\\"\\\",\\n                oftCmd: \\\"\\\"\\n            }),\\n            false\\n        );\\n    }\\n    \\n    /**\\n     * @notice Add support for new chain\\n     */\\n    function addSupportedChain(uint32 _eid, address _tokenAddress) external onlyOwner {\\n        supportedChains[_eid] = true;\\n        chainTokenAddresses[_eid] = _tokenAddress;\\n        emit ChainConfigured(_eid, _tokenAddress);\\n    }\\n    \\n    /**\\n     * @notice Emergency token recovery\\n     */\\n    function recoverTokens(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(owner(), _amount);\\n    }\\n}\",\"keccak256\":\"0xd82bfd5b9b834518fa93cb4d9533190a8e03a1444a281c2a2034ebee59b06dc3\",\"license\":\"MIT\"},\"contracts/base/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract OFTCore is Ownable {\\n    uint8 public immutable sharedDecimals;\\n    address public immutable lzEndpoint;\\n    \\n    struct SendParam {\\n        uint32 dstEid;\\n        bytes32 to;\\n        uint256 amountLD;\\n        uint256 minAmountLD;\\n        bytes extraOptions;\\n        bytes composeMsg;\\n        bytes oftCmd;\\n    }\\n    \\n    struct MessagingFee {\\n        uint256 nativeFee;\\n        uint256 lzTokenFee;\\n    }\\n    \\n    constructor(\\n        uint8 _sharedDecimals,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) Ownable(_delegate) {\\n        sharedDecimals = _sharedDecimals;\\n        lzEndpoint = _lzEndpoint;\\n    }\\n    \\n    function _debit(\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 _dstEid\\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\\n    \\n    function _credit(\\n        address _to,\\n        uint256 _amountLD,\\n        uint32 _srcEid\\n    ) internal virtual returns (uint256 amountReceivedLD);\\n    \\n    function _send(\\n        SendParam memory _sendParam,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal returns (bytes32 guid) {\\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\\n            _sendParam.amountLD,\\n            _sendParam.minAmountLD,\\n            _sendParam.dstEid\\n        );\\n        \\n        // Simplified send logic\\n        guid = keccak256(abi.encodePacked(block.timestamp, _sendParam.dstEid, _sendParam.to));\\n        return guid;\\n    }\\n    \\n    function _quote(\\n        SendParam memory _sendParam,\\n        bool _payInLzToken\\n    ) internal view returns (MessagingFee memory) {\\n        // Simplified quote logic\\n        return MessagingFee({\\n            nativeFee: 0.001 ether,\\n            lzTokenFee: 0\\n        });\\n    }\\n}\",\"keccak256\":\"0x85566acac8f3baec2f0b102eca1f2800207968faad6ef5a10f4c71339f511a89\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610e4e380380610e4e83398101604081905261002f91610269565b60068282806001600160a01b03811661006257604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006b816101fd565b505060ff919091166080526001600160a01b0390811660a052831660c08190527f8e1dc0a46ff46e8461d9a157081ee85b8bb07a4fbeae60a7e016f850d449f3098054600160ff1991821681179092557ff470b7b2da8073bab8457c0069e79fbf72da0cac92208ae95a7e6ce671759e4880546001600160a01b031990811685179091557fa02820dd47624f70d4b2f7aa4fd1b7b8a615a9cb2c2bc2b13e276dcd00bbe89880548316841790557fcb6ef6d2a10c1df4e0155bc3e67e8423ea6197dc63e5dcc995cd93b05aed15b280548216851790557f1378e6ba9eba1f198e71ba57176940a1b8011ec2671619bc56338d4882f076aa80548316841790557f62cdd21b5a8f8781ff74a3f7b7614bb0f7f00c9e76e6f70194cb84d5ae9f4288805482168517905561759f6000527f8d103fe7a3184fc50c7234d864b16b44e4ef210b829afc8c88efdcba65feb7a5805490921683179091556020919091527fb2eae19a09cd72a747ec9b144f9984ff126df890b52e5f9f78efd5cc9f84f7ca805490911690911790555050506102ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461026457600080fd5b919050565b60008060006060848603121561027e57600080fd5b6102878461024d565b92506102956020850161024d565b91506102a36040850161024d565b90509250925092565b60805160a05160c051610b6c6102e26000396000818161023b015261086c01526000610284015260006101a30152610b6c6000f3fe6080604052600436106100c25760003560e01c8063877f66e31161007f5780639716796411610059578063971679641461025d578063b353aaa714610272578063da6630fe146102a6578063f2fde38b146102dc57600080fd5b8063877f66e3146101d75780638da5cb5b146101f7578063917630091461022957600080fd5b8063069c9fae146100c7578063248514dd146100e95780632e03a8021461012e57806370047bcd14610169578063715018a61461017c578063857749b014610191575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610936565b6102fc565b005b3480156100f557600080fd5b50610119610104366004610974565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561013a57600080fd5b5061014e6101493660046109df565b61032e565b60408051825181526020928301519281019290925201610125565b6100e7610177366004610a39565b6103f1565b34801561018857600080fd5b506100e761051d565b34801561019d57600080fd5b506101c57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610125565b3480156101e357600080fd5b506100e76101f2366004610aa1565b610531565b34801561020357600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610125565b34801561023557600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b34801561026957600080fd5b506101c5600681565b34801561027e57600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b257600080fd5b506102116102c1366004610974565b6001602052600090815260409020546001600160a01b031681565b3480156102e857600080fd5b506100e76102f7366004610ad4565b6105b6565b6103046105f4565b61032a6103196000546001600160a01b031690565b6001600160a01b0384169083610621565b5050565b60408051808201909152600080825260208201526040805160e08101825263ffffffff871681523360208201529081018590526103e890606081016064610376886063610aef565b6103809190610b14565b815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050604080516020818101835284825280860191909152815190810182528381529301929092529050610685565b95945050505050565b63ffffffff851660009081526002602052604090205460ff1661045b5760405162461bcd60e51b815260206004820152601960248201527f44657374696e6174696f6e206e6f7420737570706f727465640000000000000060448201526064015b60405180910390fd5b6105156040518060e001604052808763ffffffff16815260200186815260200185815260200160648660636104909190610aef565b61049a9190610b14565b815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050604080516020818101835284825280860191909152815180820183528481529482019490945280518082019091523481529283019190915250336106b8565b505050505050565b6105256105f4565b61052f6000610731565b565b6105396105f4565b63ffffffff821660008181526002602090815260408083208054600160ff19909116811790915582529182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fdb9278f0c334aa2d5dc8eee4b3a0311c7e5b2fd897697ab2fc3c252fe20a80a0910160405180910390a25050565b6105be6105f4565b6001600160a01b0381166105e857604051631e4fbdf760e01b815260006004820152602401610452565b6105f181610731565b50565b6000546001600160a01b0316331461052f5760405163118cdaa760e01b8152336004820152602401610452565b6040516001600160a01b0383811660248301526044820183905261068091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610781565b505050565b60408051808201825260008082526020918201819052825180840190935266038d7ea4c680008352908201525b92915050565b60008060006106d48660400151876060015188600001516107f8565b87516020808a0151604051949650929450610710934293910192835260e09190911b6001600160e01b0319166020830152602482015260440190565b60405160208183030381529060405280519060200120925050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af1806107a4576040513d6000823e3d81fd5b50506000513d915081156107bc5780600114156107c9565b6001600160a01b0384163b155b156107f257604051635274afe760e01b81526001600160a01b0385166004820152602401610452565b50505050565b63ffffffff8116600090815260026020526040812054819060ff1661085f5760405162461bcd60e51b815260206004820152601f60248201527f44657374696e6174696f6e20636861696e206e6f7420737570706f72746564006044820152606401610452565b6108946001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330886108e1565b505060405183815283908190339063ffffffff85169082907f127d9f3ee0f1562f7a3f0b76df1d5cf8ffa1475473a5712684e7186e97edb4979060200160405180910390a4935093915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526107f29186918216906323b872dd9060840161064e565b80356001600160a01b038116811461093157600080fd5b919050565b6000806040838503121561094957600080fd5b6109528361091a565b946020939093013593505050565b803563ffffffff8116811461093157600080fd5b60006020828403121561098657600080fd5b61098f82610960565b9392505050565b60008083601f8401126109a857600080fd5b50813567ffffffffffffffff8111156109c057600080fd5b6020830191508360208285010111156109d857600080fd5b9250929050565b600080600080606085870312156109f557600080fd5b6109fe85610960565b935060208501359250604085013567ffffffffffffffff811115610a2157600080fd5b610a2d87828801610996565b95989497509550505050565b600080600080600060808688031215610a5157600080fd5b610a5a86610960565b94506020860135935060408601359250606086013567ffffffffffffffff811115610a8457600080fd5b610a9088828901610996565b969995985093965092949392505050565b60008060408385031215610ab457600080fd5b610abd83610960565b9150610acb6020840161091a565b90509250929050565b600060208284031215610ae657600080fd5b61098f8261091a565b80820281158282048414176106b257634e487b7160e01b600052601160045260246000fd5b600082610b3157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212204758feaea67a2c628922b71b7ae465af9e60dfe4dda82e056005f799afec38bc64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063877f66e31161007f5780639716796411610059578063971679641461025d578063b353aaa714610272578063da6630fe146102a6578063f2fde38b146102dc57600080fd5b8063877f66e3146101d75780638da5cb5b146101f7578063917630091461022957600080fd5b8063069c9fae146100c7578063248514dd146100e95780632e03a8021461012e57806370047bcd14610169578063715018a61461017c578063857749b014610191575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610936565b6102fc565b005b3480156100f557600080fd5b50610119610104366004610974565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561013a57600080fd5b5061014e6101493660046109df565b61032e565b60408051825181526020928301519281019290925201610125565b6100e7610177366004610a39565b6103f1565b34801561018857600080fd5b506100e761051d565b34801561019d57600080fd5b506101c57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610125565b3480156101e357600080fd5b506100e76101f2366004610aa1565b610531565b34801561020357600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610125565b34801561023557600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b34801561026957600080fd5b506101c5600681565b34801561027e57600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b257600080fd5b506102116102c1366004610974565b6001602052600090815260409020546001600160a01b031681565b3480156102e857600080fd5b506100e76102f7366004610ad4565b6105b6565b6103046105f4565b61032a6103196000546001600160a01b031690565b6001600160a01b0384169083610621565b5050565b60408051808201909152600080825260208201526040805160e08101825263ffffffff871681523360208201529081018590526103e890606081016064610376886063610aef565b6103809190610b14565b815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050604080516020818101835284825280860191909152815190810182528381529301929092529050610685565b95945050505050565b63ffffffff851660009081526002602052604090205460ff1661045b5760405162461bcd60e51b815260206004820152601960248201527f44657374696e6174696f6e206e6f7420737570706f727465640000000000000060448201526064015b60405180910390fd5b6105156040518060e001604052808763ffffffff16815260200186815260200185815260200160648660636104909190610aef565b61049a9190610b14565b815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050604080516020818101835284825280860191909152815180820183528481529482019490945280518082019091523481529283019190915250336106b8565b505050505050565b6105256105f4565b61052f6000610731565b565b6105396105f4565b63ffffffff821660008181526002602090815260408083208054600160ff19909116811790915582529182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fdb9278f0c334aa2d5dc8eee4b3a0311c7e5b2fd897697ab2fc3c252fe20a80a0910160405180910390a25050565b6105be6105f4565b6001600160a01b0381166105e857604051631e4fbdf760e01b815260006004820152602401610452565b6105f181610731565b50565b6000546001600160a01b0316331461052f5760405163118cdaa760e01b8152336004820152602401610452565b6040516001600160a01b0383811660248301526044820183905261068091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610781565b505050565b60408051808201825260008082526020918201819052825180840190935266038d7ea4c680008352908201525b92915050565b60008060006106d48660400151876060015188600001516107f8565b87516020808a0151604051949650929450610710934293910192835260e09190911b6001600160e01b0319166020830152602482015260440190565b60405160208183030381529060405280519060200120925050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af1806107a4576040513d6000823e3d81fd5b50506000513d915081156107bc5780600114156107c9565b6001600160a01b0384163b155b156107f257604051635274afe760e01b81526001600160a01b0385166004820152602401610452565b50505050565b63ffffffff8116600090815260026020526040812054819060ff1661085f5760405162461bcd60e51b815260206004820152601f60248201527f44657374696e6174696f6e20636861696e206e6f7420737570706f72746564006044820152606401610452565b6108946001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330886108e1565b505060405183815283908190339063ffffffff85169082907f127d9f3ee0f1562f7a3f0b76df1d5cf8ffa1475473a5712684e7186e97edb4979060200160405180910390a4935093915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526107f29186918216906323b872dd9060840161064e565b80356001600160a01b038116811461093157600080fd5b919050565b6000806040838503121561094957600080fd5b6109528361091a565b946020939093013593505050565b803563ffffffff8116811461093157600080fd5b60006020828403121561098657600080fd5b61098f82610960565b9392505050565b60008083601f8401126109a857600080fd5b50813567ffffffffffffffff8111156109c057600080fd5b6020830191508360208285010111156109d857600080fd5b9250929050565b600080600080606085870312156109f557600080fd5b6109fe85610960565b935060208501359250604085013567ffffffffffffffff811115610a2157600080fd5b610a2d87828801610996565b95989497509550505050565b600080600080600060808688031215610a5157600080fd5b610a5a86610960565b94506020860135935060408601359250606086013567ffffffffffffffff811115610a8457600080fd5b610a9088828901610996565b969995985093965092949392505050565b60008060408385031215610ab457600080fd5b610abd83610960565b9150610acb6020840161091a565b90509250929050565b600060208284031215610ae657600080fd5b61098f8261091a565b80820281158282048414176106b257634e487b7160e01b600052601160045260246000fd5b600082610b3157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212204758feaea67a2c628922b71b7ae465af9e60dfe4dda82e056005f799afec38bc64736f6c63430008160033",
  "devdoc": {
    "details": "Maintains 6 decimal precision across all chains for PYUSD",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PYUSDOFTAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSupportedChain(uint32,address)": {
        "notice": "Add support for new chain"
      },
      "quoteSend(uint32,uint256,bytes)": {
        "notice": "Quote fee for cross-chain transfer"
      },
      "recoverTokens(address,uint256)": {
        "notice": "Emergency token recovery"
      },
      "sendPYUSD(uint32,bytes32,uint256,bytes)": {
        "notice": "Send PYUSD cross-chain"
      }
    },
    "notice": "LayerZero OFT Adapter for PYUSD enabling cross-chain transfers",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PYUSDOFTAdapter.sol:PYUSDOFTAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3943,
        "contract": "contracts/PYUSDOFTAdapter.sol:PYUSDOFTAdapter",
        "label": "chainTokenAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 3947,
        "contract": "contracts/PYUSDOFTAdapter.sol:PYUSDOFTAdapter",
        "label": "supportedChains",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}