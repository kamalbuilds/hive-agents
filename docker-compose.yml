version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hivemind-postgres
    environment:
      POSTGRES_USER: hivemind
      POSTGRES_PASSWORD: hivemind123
      POSTGRES_DB: hivemind
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hivemind-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hivemind"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hivemind-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hivemind-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hivemind-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://hivemind:hivemind123@postgres:5432/hivemind
      REDIS_URL: redis://redis:6379
      API_PORT: 3001
      WS_PORT: 3002
    volumes:
      - ./src:/app/src
      - ./contracts:/app/contracts
      - ./scripts:/app/scripts
    ports:
      - "3001:3001"
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hivemind-network
    restart: unless-stopped

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hivemind-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:3001
      NEXT_PUBLIC_WS_URL: ws://backend:3002
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - hivemind-network
    restart: unless-stopped

  # Agent Coordinator (Queen)
  agent-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: hivemind-coordinator
    environment:
      AGENT_TYPE: coordinator
      AGENT_ID: queen-001
      API_URL: http://backend:3001
      WS_URL: ws://backend:3002
    depends_on:
      - backend
    networks:
      - hivemind-network
    restart: unless-stopped

  # Trading Agent
  agent-trader:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: hivemind-trader
    environment:
      AGENT_TYPE: trader
      AGENT_ID: trader-001
      API_URL: http://backend:3001
      WS_URL: ws://backend:3002
    depends_on:
      - backend
    networks:
      - hivemind-network
    restart: unless-stopped

  # Analyzer Agent
  agent-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: hivemind-analyzer
    environment:
      AGENT_TYPE: analyzer
      AGENT_ID: analyzer-001
      API_URL: http://backend:3001
      WS_URL: ws://backend:3002
    depends_on:
      - backend
    networks:
      - hivemind-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hivemind-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - hivemind-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hivemind-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - hivemind-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: hivemind-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - hivemind-network
    restart: unless-stopped

networks:
  hivemind-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: